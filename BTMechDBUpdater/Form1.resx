<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="label5.Text" xml:space="preserve">
    <value>Go to the settings tab and set the directories to point to where all your mechdefs are as well as where your metadatadatabase.db file is located. Currently all mechdefs must be located in one folder (no subfolders).</value>
  </data>
  <metadata name="tabPage2.Locked" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="tabPage1.Locked" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <data name="richTextBox1.Text" xml:space="preserve">
    <value>BMIT - BattleTech Metadatabase Import Tool

This is a tool that reads the json mechdef files and updates the db.  This is to allow you to use custom mechs in the campaign.  If properly tagged they will show up as enemies during random contracts.

NOTE: You must make sure the csv contains your mechdefs and that they are properly formed (make sure they work in skirmish mode). Make sure they are working as you intend by testing them in Skirmish mode before attempting to import them using this tool.  

This is very much an alpha/test release to see if it can handle various mechdefs.

It will both create new mech records or update existing mech records if one already exists for that mech id.

It does the following

    It checks to see if there's a TagSetID for this mechDef ID.  If not, it creates a new one.  If so, it grabs the existing one.
    It creates or updates the UnitDef table using the values from the JSON.  This will allow you to change the values by changing the json and then running the update.
    It creates or updates the TagSetTag table.  If you remove MechTags from the JSON they will be removed from the db as well.

   
    -i have been able to load an existing game save (originally created on an unmodded game)
    -I have encountered the new mechs in the campaign contracts
    -I have been able to salvage them - I haven't collected a full mech yet


Instructions

    Copy all your mechdefs into one single folder - for instance if you use the JK_Varients they would by default be in C:\Program Files(x86)\G:\Steam\steamapps\common\BATTLETECH\BattleTech_Data\StreamingAssets\data\mods\JK_Variants\mech - it's ok to leave them there.

    Go into the BMIT folder that you unzipped and click on BMIT.exe

        If for some reason this doesn't run - make sure you have the latest .net framework installed from here: https://support.microsoft.com/en-us/help/3186497/the-net-framework-4-7-offline-installer-for-windows

    Once it's running go to the Settings Tab and paste into the MechDef Path textbox the path to your mechdefs folder that you made in step 3 - (C:\Program Files (x86)\Steam\steamapps\common\BATTLETECH\BattleTech_Data\StreamingAssets\data\mods\JK_Variants\mech in this example)

    In the next textbox MDD Path - paste in the full path to your MetadataDatabase.db file - C:\Program Files (x86)\Steam\steamapps\common\BATTLETECH\BattleTech_Data\StreamingAssets\MDD\MetadataDatabase.db - unless you've installed your steam library somewhere else or if you use GOG you'll have to find that file yourself.

    Click Save Settings on this tab so you don't have to keep doing step 5 and 6

    Click on the Basic Tab

    Click the Import button. Watch the pretty green bar at the bottom until it says complete. :)

    If the green bar is not moving there is a problem with finding or accessing your .md file.

    If this fails for any reason - restore your original db file. There will a file named MetadataDatabase.md-&lt;TimeStamp&gt;.bak in the same as the original. This is a copy from before any changes were made. Delete the existing MetadataDatabase.md and rename the .bak file to MetadataDatabase.md

Another important thing is that make sure the mechs really work in skirmish before you do any of this.
You can test this by doing a few things. First make sure the game loads to the main menu. (it originally stalled for me here with a black screen and 59 in the top corner) Second, once you are on the main menu, make sure you can start a skirmish game with any of the new mechs. (This part failed for me with it sitting in continual loading). Finally make sure you can load your existing campaign save. (Until I fixed the csv, the Continue button was greyed out). Make sure of all of this before you bother with my importer. Otherwise you will probably break your game.

</value>
  </data>
  <metadata name="statusStrip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
</root>